#!/usr/bin/env bash

function filec() {
        echo "Copying $1 to clipboard"
        cat $1 | xclip
}
function filev() {
        echo "Pasting clipboard to file $1"
        xclip -o >$1
}

function extract() {
        if [ -f $1 ]; then
                case $1 in
                *.tar.bz2) tar -jxvf $1 ;;
                *.tar.gz) tar -zxvf $1 ;;
                *.bz2) bunzip2 $1 ;;
                *.gz) gunzip $1 ;;
                *.tar) tar -xvf $1 ;;
                *.tbz2) tar -jxvf $1 ;;
                *.tgz) tar -zxvf $1 ;;
                *.zip) unzip $1 ;;
                *)
                        printf "\e[33mUnsupported format\e[0m"
                        return 1
                        ;;
                esac
                printf "\e[32mExtracted\e[0m %s" "$1"
        else
                printf "\e[33m%s is not a valid extractable file\e[0m" "$1"
                return 1
        fi
        return 0
}

function extractto() {
        local isVerbose destination response filename
        trap "echo User aborted." SIGINT SIGTERM
        if [[ "$#" -lt 1 ]]; then
                printf "\e[1mUsage: \e[36mextractto \e[01;36m<FILE> \e[30m[DESTINATION_FOLDER] [v]\e[0m\n"
                printf "Append a \e[36mv\e[0m to be verbose"
                return 1
        fi
        if [[ ! -e "$1" ]]; then
                printf "\e[31mFile not found\e[0m"
                return 2
        fi
        if [[ -z "$2" ]]; then
                destination="."
        elif [[ ! -d "$2" ]]; then
                printf "\e[33mDestination folder not exist or is not a directory.\e[0m"
                printf "\nCreate? (y/n): "
                read response
                if [[ $response == y || $response == Y ]]; then
                        mkdir -p "$2"
                        if [ $? -eq 0 ]; then
                                destination="$2"
                        else
                                return 6
                        fi
                else
                        return 3
                fi
        else
                destination="$2"
        fi
        if [[ ! -z "$3" ]]; then
                if [[ "$3" != "v" ]]; then
                        printf "\e[31mWrong argument %s\e[0m" "$3"
                        return 4
                fi
                isVerbose="$3"
        fi
        filename=$(basename "$1")
        case "${filename##*.}" in
        tar)
                tar x${isVerbose}f "$1" -C "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (uncompressed tar)" "$1" "$destination"
                ;;
        gz)
                tar x${isVerbose}fz "$1" -C "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (gzip compressed tar)" "$1" "$destination"
                ;;
        tgz)
                tar x${isVerbose}fz "$1" -C "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (gzip compressed tar)" "$1" "$destination"
                ;;
        xz)
                tar x${isVerbose}f -J "$1" -C "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (gzip compressed tar)" "$1" "$destination"
                ;;
        bz2)
                tar x${isVerbose}fj "$1" -C "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (bzip compressed tar)" "$1" "$destination"
                ;;
        zip)
                unzip "$1" -d "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (zip compressed tar)" "$1" "$destination"
                ;;
        rar)
                unrar x "$1" "$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (rar compressed file)" "$1" "$destination"
                ;;
        7z)
                7za e "$1" -o"$destination"
                printf "\e[36m%s\e[0m > \e[36m%s\e[0m (7zip compressed file)" "$1" "$destination"
                ;;
        *)
                printf "\e[33mUnsupported file format\e[0m"
                return 5
                ;;
        esac
        trap '' SIGINT SIGTERM
        return 0
}

function compress() {
        if [ -n $1 ]; then
                file=$1
                case $file in
                *.tar.xz) shift && tar cJf $file $* ;;
                *.tar.bz2) shift && tar cjf $file $* ;;
                *.tar.gz) shift && tar czf $file $* ;;
                *.gz) shift && tar czf $file $* ;;
                *.tar) shift && tar cf $file $* ;;
                *.tgz) shift && tar czf $file $* ;;
                *.zip) shift && zip $file $* ;;
                *.7z) shift && 7za a $file $* >/dev/null ;;
                *)
                        echo -e "\e[1;38;5;221m\u2757 \e[0mUnsupported format"
                        return 1
                        ;;
                esac
                echo -e "\e[1;38;5;77m\u2714 \e[0mCompressed \e[3;38;5;80m'$file'\e[0m"
        else
                echo -e "\e[1;38;5;160m\u2717 \e[3;38;5;80m'$file' \e[1;37mis not a valid extractable file\e[0m"
                return 1
        fi
        return 0
}

function gzcomp() {
        local origsize=$(wc -c <"$1")
        local gzipsize=$(gzip -c "$1" | wc -c)
        local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
        printf "orig: %d bytes\n" "$origsize"
        printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}
